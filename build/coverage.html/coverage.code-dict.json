{"/home/travis/build/npmtest/node-npmtest-vk-io/test.js":"/* istanbul instrument in package npmtest_vk_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vk-io/lib.npmtest_vk_io.js":"/* istanbul instrument in package npmtest_vk_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vk_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vk_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vk-io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vk-io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vk_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vk_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vk_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vk_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vk_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vk_io.__dirname + '/lib.npmtest_vk_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/index.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\nconst request = require('request-promise');\r\nconst debug = require('debug')('vk-io:main');\r\n\r\nconst Api = require('./api/index');\r\nconst Auth = require('./auth/index');\r\nconst Chain = require('./execute/chain');\r\nconst Upload = require('./upload/index');\r\nconst Collect = require('./execute/collect');\r\nconst Longpoll = require('./longpoll/index');\r\n\r\nconst parseLink = require('./snippets/link');\r\nconst {\r\n\tdefaultMainOptions,\r\n\tMAX_SCOPE,\r\n\tAPI_VERSION\r\n} = require('./util/constants');\r\nconst {\r\n\tgetAttachment,\r\n\tgetSmallPhoto,\r\n\tgetMediumPhoto,\r\n\tgetLargePhoto\r\n} = require('./snippets/attachments');\r\n\r\n/**\r\n * Класс обёртки ВКонтакте\r\n *\r\n * @public\r\n */\r\nclass VK {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {MainOptions} options\r\n\t */\r\n\tconstructor (options = {}) {\r\n\t\tthis.options = Object.assign({}, defaultMainOptions);\r\n\t\tthis.request = request.defaults({\r\n\t\t\tmethod: 'POST',\r\n\t\t\tjson: true\r\n\t\t});\r\n\r\n\t\tthis.api = new Api(this);\r\n\t\tthis.auth = new Auth(this);\r\n\t\tthis.upload = new Upload(this);\r\n\t\tthis.collect = new Collect(this);\r\n\t\tthis.longpoll = new Longpoll(this);\r\n\r\n\t\tthis._captchaHandler = null;\r\n\r\n\t\tthis.setOptions(options);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает текущую версию API\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\tget API_VERSION () {\r\n\t\treturn API_VERSION;\r\n\t}\r\n\r\n\t/**\r\n\t * Устанавливает токен\r\n\t *\r\n\t * @param {string} token\r\n\t *\r\n\t * @return {this}\r\n\t */\r\n\tsetToken (token) {\r\n\t\tthis.options.token = token;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Устанавливает опции\r\n\t *\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {this}\r\n\t */\r\n\tsetOptions (options) {\r\n\t\tObject.assign(\r\n\t\t\tthis.options,\r\n\t\t\tthis._transformOptions(options)\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Устанавливает обработчик капчи\r\n\t *\r\n\t * @param {?function} handler\r\n\t *\r\n\t * @return {this}\r\n\t */\r\n\tsetCaptchaHandler (handler) {\r\n\t\tthis._captchaHandler = handler;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает класс для работы с цепочками методов\r\n\t *\r\n\t * @return {Chain}\r\n\t */\r\n\tchain () {\r\n\t\treturn new Chain(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Вызов хранимой процедуры\r\n\t *\r\n\t * @param {string} name\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tprocedure (name, params) {\r\n\t\treturn this.api.call(`execute.${name}`, params);\r\n\t}\r\n\r\n\t/**\r\n\t * Упрощённый вызов целой цепочки метода\r\n\t *\r\n\t * @param {string} method\r\n\t * @param {Array}  queues\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\texecutes (method, queues) {\r\n\t\treturn Chain.executes(this, method, queues);\r\n\t}\r\n\r\n\t/**\r\n\t * Разбирает ссылку ВКонтакте\r\n\t *\r\n\t * @param {string} uri\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tparseLink (uri) {\r\n\t\treturn parseLink(this.api, uri);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает токен\r\n\t *\r\n\t * @return {?string}\r\n\t */\r\n\tgetToken () {\r\n\t\treturn this.options.token;\r\n\t}\r\n\r\n\t/**\r\n\t * Собирает прикрипление из переданных значений\r\n\t *\r\n\t * @param {string} type\r\n\t * @param {mixed}  attachments\r\n\t *\r\n\t * @return {mixed}\r\n\t */\r\n\tgetAttachment (type, attachments) {\r\n\t\ttype = type.toLowerCase();\r\n\r\n\t\tif (!Array.isArray(attachments)) {\r\n\t\t\treturn getAttachment(type, attachments);\r\n\t\t}\r\n\r\n\t\treturn attachments.map((attachment) => getAttachment(type, attachment));\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает ссылку на маленькую фотографию\r\n\t *\r\n\t * @param {Object} photo\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\tgetSmallPhoto (photo) {\r\n\t\treturn getSmallPhoto(photo);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает ссылку на среднюю фотографию\r\n\t *\r\n\t * @param {Object} photo\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\tgetMediumPhoto (photo) {\r\n\t\treturn getMediumPhoto(photo);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает ссылку на большую фотографию\r\n\t *\r\n\t * @param {Object} photo\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\tgetLargePhoto (photo) {\r\n\t\treturn getLargePhoto(photo);\r\n\t}\r\n\r\n\t/**\r\n\t * Разбирает опции\r\n\t *\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\t_transformOptions (options) {\r\n\t\toptions = Object.assign({}, options);\r\n\r\n\t\tif ('id' in options) {\r\n\t\t\toptions.id = +options.id;\r\n\t\t}\r\n\r\n\t\tif ('scope' in options) {\r\n\t\t\tif (Array.isArray(options.scope)) {\r\n\t\t\t\toptions.scope = options.scope.join(',');\r\n\t\t\t} else if (options.scope === 'all') {\r\n\t\t\t\toptions.scope = MAX_SCOPE.join(',');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ('proxy' in options) {\r\n\t\t\tlet proxy = options.proxy;\r\n\t\t\tdelete options.proxy;\r\n\r\n\t\t\t/* На случай лайфхака :/ */\r\n\t\t\tif (!proxy.startsWith('http')) {\r\n\t\t\t\tproxy = 'http://' + proxy;\r\n\t\t\t}\r\n\r\n\t\t\tthis.request = this.request.defaults({ proxy });\r\n\t\t}\r\n\r\n\t\treturn options;\r\n\t}\r\n\r\n\t/** Дальше устаревшее */\r\n\r\n\tsetting (settings) {\r\n\t\tdebug('vk.setting deprecated, use vk.setOptions');\r\n\r\n\t\treturn this.setOptions(settings);\r\n\t}\r\n\r\n\tisMethod (method) {\r\n\t\tdebug('vk.isMethod deprecated, use vk.api.isMethod');\r\n\r\n\t\treturn this.api.isMethod(method);\r\n\t}\r\n\r\n\tstandaloneAuth () {\r\n\t\tdebug('vk.standaloneAuth deprecated, use vk.auth.standalone');\r\n\r\n\t\treturn this.auth.standalone();\r\n\t}\r\n\r\n\tappAuth () {\r\n\t\tdebug('vk.appAuth deprecated, use vk.auth.server');\r\n\r\n\t\treturn this.auth.server();\r\n\t}\r\n\r\n\tandroidAuth () {\r\n\t\tdebug('vk.androidAuth deprecated, use vk.auth.android');\r\n\r\n\t\treturn this.auth.android();\r\n\t}\r\n\r\n\twindowsAuth () {\r\n\t\tdebug('vk.windowsAuth deprecated, use vk.auth.windows');\r\n\r\n\t\treturn this.auth.windows();\r\n\t}\r\n\r\n\twindowsPhoneAuth () {\r\n\t\tdebug('vk.windowsPhoneAuth deprecated, use vk.auth.windowsPhone');\r\n\r\n\t\treturn this.auth.windowsPhone();\r\n\t}\r\n\r\n\tiphoneAuth () {\r\n\t\tdebug('vk.iphoneAuth deprecated, use vk.auth.iphone');\r\n\r\n\t\treturn this.auth.iphone();\r\n\t}\r\n\r\n\tipadAuth () {\r\n\t\tdebug('vk.ipadAuth deprecated, use vk.auth.ipad');\r\n\r\n\t\treturn this.auth.ipad();\r\n\t}\r\n\r\n\tget stream () {\r\n\t\tdebug('vk.stream deprecated, use vk.collect');\r\n\r\n\t\treturn this.collect;\r\n\t}\r\n}\r\n\r\nmodule.exports = VK;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/api/methods.js":"'use strict';\r\n\r\n/**\r\n * Список методов ВКонтакте\r\n * Последнее обновление 25.03.2017\r\n *\r\n * @type {Array}\r\n */\r\nmodule.exports = [\r\n\t/**\r\n\t * Account\r\n\t * Методы для работы с аккаунтом\r\n\t */\r\n\t'account.banUser',\r\n\t'account.changePassword',\r\n\t'account.getActiveOffers',\r\n\t'account.getAppPermissions',\r\n\t'account.getBanned',\r\n\t'account.getCounters',\r\n\t'account.getInfo',\r\n\t'account.getProfileInfo',\r\n\t'account.getPushSettings',\r\n\t'account.lookupContacts',\r\n\t'account.registerDevice',\r\n\t'account.saveProfileInfo',\r\n\t'account.setInfo',\r\n\t'account.setNameInMenu',\r\n\t'account.setOffline',\r\n\t'account.setOnline',\r\n\t'account.setPushSettings',\r\n\t'account.setSilenceMode',\r\n\t'account.unbanUser',\r\n\t'account.unregisterDevice',\r\n\r\n\t/**\r\n\t * Ads\r\n\t * API для работы с рекламным кабинетом ВКонтакт\r\n\t */\r\n\t'ads.addOfficeUsers',\r\n\t'ads.checkLink',\r\n\t'ads.createAds',\r\n\t'ads.createCampaigns',\r\n\t'ads.createClients',\r\n\t'ads.createTargetGroup',\r\n\t'ads.deleteAds',\r\n\t'ads.deleteCampaigns',\r\n\t'ads.deleteClients',\r\n\t'ads.deleteTargetGroup',\r\n\t'ads.getAccounts',\r\n\t'ads.getAds',\r\n\t'ads.getAdsLayout',\r\n\t'ads.getAdsTargeting',\r\n\t'ads.getBudget',\r\n\t'ads.getCampaigns',\r\n\t'ads.getCategories',\r\n\t'ads.getClients',\r\n\t'ads.getDemographics',\r\n\t'ads.getFloodStats',\r\n\t'ads.getOfficeUsers',\r\n\t'ads.getPostsReach',\r\n\t'ads.getRejectionReason',\r\n\t'ads.getStatistics',\r\n\t'ads.getSuggestions',\r\n\t'ads.getTargetGroups',\r\n\t'ads.getTargetingStats',\r\n\t'ads.getUploadURL',\r\n\t'ads.getVideoUploadURL',\r\n\t'ads.importTargetContacts',\r\n\t'ads.removeOfficeUsers',\r\n\t'ads.updateAds',\r\n\t'ads.updateCampaigns',\r\n\t'ads.updateClients',\r\n\t'ads.updateTargetGroup',\r\n\r\n\t/**\r\n\t * Apps\r\n\t * Методы для работы с приложениями\r\n\t */\r\n\t'apps.deleteAppRequests',\r\n\t'apps.get',\r\n\t'apps.getCatalog',\r\n\t'apps.getFriendsList',\r\n\t'apps.getLeaderboard',\r\n\t'apps.getScore',\r\n\t'apps.sendRequest',\r\n\r\n\t/**\r\n\t * Audio\r\n\t * Методы для работы с аудиозаписями\r\n\t */\r\n\t'audio.get',\r\n\t'audio.getById',\r\n\t'audio.getLyrics',\r\n\t'audio.search',\r\n\t'audio.getUploadServer',\r\n\t'audio.save',\r\n\t'audio.add',\r\n\t'audio.delete',\r\n\t'audio.edit',\r\n\t'audio.reorder',\r\n\t'audio.restore',\r\n\t'audio.getAlbums',\r\n\t'audio.addAlbum',\r\n\t'audio.editAlbum',\r\n\t'audio.deleteAlbum',\r\n\t'audio.moveToAlbum',\r\n\t'audio.setBroadcast',\r\n\t'audio.getBroadcastList',\r\n\t'audio.getRecommendations',\r\n\t'audio.getPopular',\r\n\t'audio.getCount',\r\n\r\n\t/**\r\n\t * Auth\r\n\t * Методы для работы с авторизацией\r\n\t */\r\n\t'auth.checkPhone',\r\n\t'auth.confirm',\r\n\t'auth.restore',\r\n\t'auth.signup',\r\n\r\n\t/**\r\n\t * Board\r\n\t * Методы для работы с обсуждениями\r\n\t */\r\n\t'board.addTopic',\r\n\t'board.closeTopic',\r\n\t'board.createComment',\r\n\t'board.deleteComment',\r\n\t'board.deleteTopic',\r\n\t'board.editComment',\r\n\t'board.editTopic',\r\n\t'board.fixTopic',\r\n\t'board.getComments',\r\n\t'board.getTopics',\r\n\t'board.openTopic',\r\n\t'board.restoreComment',\r\n\t'board.unfixTopic',\r\n\r\n\t/**\r\n\t * Database\r\n\t * Доступ к базе данных учебных заведений ВКонтакте\r\n\t */\r\n\t'database.getChairs',\r\n\t'database.getCities',\r\n\t'database.getCitiesById',\r\n\t'database.getCountries',\r\n\t'database.getCountriesById',\r\n\t'database.getFaculties',\r\n\t'database.getRegions',\r\n\t'database.getSchoolClasses',\r\n\t'database.getSchools',\r\n\t'database.getStreetsById',\r\n\t'database.getUniversities',\r\n\r\n\t/**\r\n\t * Docs\r\n\t * Методы для работы с документами\r\n\t */\r\n\t'docs.add',\r\n\t'docs.delete',\r\n\t'docs.edit',\r\n\t'docs.get',\r\n\t'docs.getById',\r\n\t'docs.getTypes',\r\n\t'docs.getUploadServer',\r\n\t'docs.getWallUploadServer',\r\n\t'docs.save',\r\n\t'docs.search',\r\n\r\n\t/**\r\n\t * Fave\r\n\t * Методы для работы с закладками\r\n\t */\r\n\t'fave.addGroup',\r\n\t'fave.addLink',\r\n\t'fave.addUser',\r\n\t'fave.getLinks',\r\n\t'fave.getMarketItems',\r\n\t'fave.getPhotos',\r\n\t'fave.getPosts',\r\n\t'fave.getUsers',\r\n\t'fave.getVideos',\r\n\t'fave.removeGroup',\r\n\t'fave.removeLink',\r\n\t'fave.removeUser',\r\n\r\n\t/**\r\n\t * Friends\r\n\t * Методы для работы с друзьями\r\n\t */\r\n\t'friends.add',\r\n\t'friends.addList',\r\n\t'friends.areFriends',\r\n\t'friends.delete',\r\n\t'friends.deleteAllRequests',\r\n\t'friends.deleteList',\r\n\t'friends.edit',\r\n\t'friends.editList',\r\n\t'friends.get',\r\n\t'friends.getAppUsers',\r\n\t'friends.getByPhones',\r\n\t'friends.getLists',\r\n\t'friends.getMutual',\r\n\t'friends.getOnline',\r\n\t'friends.getRecent',\r\n\t'friends.getRequests',\r\n\t'friends.getSuggestions',\r\n\t'friends.search',\r\n\r\n\t/**\r\n\t * Gifts\r\n\t * Методы для работы с подарками\r\n\t */\r\n\t'gifts.get',\r\n\t/* Неофициально */\r\n\t'gifts.send',\r\n\t'gifts.getCatalog',\r\n\r\n\t/**\r\n\t * Groups\r\n\t * Методы для работы с сообществами\r\n\t */\r\n\t'groups.addLink',\r\n\t'groups.approveRequest',\r\n\t'groups.banUser',\r\n\t'groups.create',\r\n\t'groups.deleteLink',\r\n\t'groups.edit',\r\n\t'groups.editLink',\r\n\t'groups.editManager',\r\n\t'groups.editPlace',\r\n\t'groups.get',\r\n\t'groups.getBanned',\r\n\t'groups.getById',\r\n\t'groups.getCallbackConfirmationCode',\r\n\t'groups.getCallbackServerSettings',\r\n\t'groups.getCallbackSettings',\r\n\t'groups.getCatalog',\r\n\t'groups.getCatalogInfo',\r\n\t'groups.getInvitedUsers',\r\n\t'groups.getInvites',\r\n\t'groups.getMembers',\r\n\t'groups.getRequests',\r\n\t'groups.getSettings',\r\n\t'groups.invite',\r\n\t'groups.isMember',\r\n\t'groups.join',\r\n\t'groups.leave',\r\n\t'groups.removeUser',\r\n\t'groups.reorderLink',\r\n\t'groups.search',\r\n\t'groups.setCallbackServer',\r\n\t'groups.setCallbackServerSettings',\r\n\t'groups.setCallbackSettings',\r\n\t'groups.unbanUser',\r\n\r\n\t/**\r\n\t * Leads\r\n\t * Управления рекламными акциями (офферами).\r\n\t */\r\n\t'leads.checkUser',\r\n\t'leads.complete',\r\n\t'leads.getStats',\r\n\t'leads.getUsers',\r\n\t'leads.metricHit',\r\n\t'leads.start',\r\n\r\n\t/**\r\n\t * Likes\r\n\t * Методы для работы с отметками «Мне нравится»\r\n\t */\r\n\t'likes.add',\r\n\t'likes.delete',\r\n\t'likes.getList',\r\n\t'likes.isLiked',\r\n\r\n\t/**\r\n\t * Market\r\n\t * Методы market позволяют работать с товарами в сообществах\r\n\t */\r\n\t'market.add',\r\n\t'market.addAlbum',\r\n\t'market.addToAlbum',\r\n\t'market.createComment',\r\n\t'market.delete',\r\n\t'market.deleteAlbum',\r\n\t'market.deleteComment',\r\n\t'market.edit',\r\n\t'market.editAlbum',\r\n\t'market.editComment',\r\n\t'market.get',\r\n\t'market.getAlbumById',\r\n\t'market.getAlbums',\r\n\t'market.getById',\r\n\t'market.getCategories',\r\n\t'market.getComments',\r\n\t'market.removeFromAlbum',\r\n\t'market.reorderAlbums',\r\n\t'market.reorderItems',\r\n\t'market.report',\r\n\t'market.reportComment',\r\n\t'market.restore',\r\n\t'market.restoreComment',\r\n\t'market.search',\r\n\r\n\t/**\r\n\t * Messages\r\n\t * Методы для работы с личными сообщениями\r\n\t */\r\n\t'messages.addChatUser',\r\n\t'messages.allowMessagesFromGroup',\r\n\t'messages.createChat',\r\n\t'messages.delete',\r\n\t'messages.deleteChatPhoto',\r\n\t'messages.deleteDialog',\r\n\t'messages.denyMessagesFromGroup',\r\n\t'messages.editChat',\r\n\t'messages.get',\r\n\t'messages.getById',\r\n\t'messages.getChat',\r\n\t'messages.getChatUsers',\r\n\t'messages.getDialogs',\r\n\t'messages.getHistory',\r\n\t'messages.getHistoryAttachments',\r\n\t'messages.getLastActivity',\r\n\t'messages.getLongPollHistory',\r\n\t'messages.getLongPollServer',\r\n\t'messages.isMessagesFromGroupAllowed',\r\n\t'messages.markAsAnsweredDialog',\r\n\t'messages.markAsImportant',\r\n\t'messages.markAsImportantDialog',\r\n\t'messages.markAsRead',\r\n\t'messages.removeChatUser',\r\n\t'messages.restore',\r\n\t'messages.search',\r\n\t'messages.searchDialogs',\r\n\t'messages.send',\r\n\t'messages.setActivity',\r\n\t'messages.setChatPhoto',\r\n\r\n\t/**\r\n\t * Newsfeed\r\n\t * Методы для работы с новостной лентой пользователя\r\n\t */\r\n\t'newsfeed.addBan',\r\n\t'newsfeed.deleteBan',\r\n\t'newsfeed.deleteList',\r\n\t'newsfeed.get',\r\n\t'newsfeed.getBanned',\r\n\t'newsfeed.getComments',\r\n\t'newsfeed.getLists',\r\n\t'newsfeed.getMentions',\r\n\t'newsfeed.getRecommended',\r\n\t'newsfeed.getSuggestedSources',\r\n\t'newsfeed.ignoreItem',\r\n\t'newsfeed.saveList',\r\n\t'newsfeed.search',\r\n\t'newsfeed.unignoreItem',\r\n\t'newsfeed.unsubscribe',\r\n\r\n\t/**\r\n\t * Notes\r\n\t * Методы для работы с заметками.\r\n\t */\r\n\t'notes.add',\r\n\t'notes.createComment',\r\n\t'notes.delete',\r\n\t'notes.deleteComment',\r\n\t'notes.edit',\r\n\t'notes.editComment',\r\n\t'notes.get',\r\n\t'notes.getById',\r\n\t'notes.getComments',\r\n\t'notes.restoreComment',\r\n\r\n\t/**\r\n\t * Notifications\r\n\t * Методы для работы с оповещениями\r\n\t */\r\n\t'notifications.get',\r\n\t'notifications.markAsViewed',\r\n\r\n\t/**\r\n\t * Orders\r\n\t * Управление заказми совершённые в приложениях\r\n\t */\r\n\t'orders.changeState',\r\n\t'orders.get',\r\n\t'orders.getAmount',\r\n\t'orders.getById',\r\n\r\n\t/**\r\n\t * Pages\r\n\t * Методы для работы с вики-страницами\r\n\t */\r\n\t'pages.clearCache',\r\n\t'pages.get',\r\n\t'pages.getHistory',\r\n\t'pages.getTitles',\r\n\t'pages.getVersion',\r\n\t'pages.parseWiki',\r\n\t'pages.save',\r\n\t'pages.saveAccess',\r\n\r\n\t/**\r\n\t * Photos\r\n\t * Методы для работы с фотографиями\r\n\t */\r\n\t'photos.confirmTag',\r\n\t'photos.copy',\r\n\t'photos.createAlbum',\r\n\t'photos.createComment',\r\n\t'photos.delete',\r\n\t'photos.deleteAlbum',\r\n\t'photos.deleteComment',\r\n\t'photos.edit',\r\n\t'photos.editAlbum',\r\n\t'photos.editComment',\r\n\t'photos.get',\r\n\t'photos.getAlbums',\r\n\t'photos.getAlbumsCount',\r\n\t'photos.getAll',\r\n\t'photos.getAllComments',\r\n\t'photos.getById',\r\n\t'photos.getChatUploadServer',\r\n\t'photos.getComments',\r\n\t'photos.getMarketAlbumUploadServer',\r\n\t'photos.getMarketUploadServer',\r\n\t'photos.getMessagesUploadServer',\r\n\t'photos.getNewTags',\r\n\t'photos.getOwnerCoverPhotoUploadServer',\r\n\t'photos.getOwnerPhotoUploadServer',\r\n\t'photos.getTags',\r\n\t'photos.getUploadServer',\r\n\t'photos.getUserPhotos',\r\n\t'photos.getWallUploadServer',\r\n\t'photos.makeCover',\r\n\t'photos.move',\r\n\t'photos.putTag',\r\n\t'photos.removeTag',\r\n\t'photos.reorderAlbums',\r\n\t'photos.reorderPhotos',\r\n\t'photos.report',\r\n\t'photos.reportComment',\r\n\t'photos.restore',\r\n\t'photos.restoreComment',\r\n\t'photos.save',\r\n\t'photos.saveMarketAlbumPhoto',\r\n\t'photos.saveMarketPhoto',\r\n\t'photos.saveMessagesPhoto',\r\n\t'photos.saveOwnerCoverPhoto',\r\n\t'photos.saveOwnerPhoto',\r\n\t'photos.saveWallPhoto',\r\n\t'photos.search',\r\n\r\n\t/**\r\n\t * Places\r\n\t * Методы для работы с местами\r\n\t */\r\n\t'places.add',\r\n\t'places.checkin',\r\n\t'places.getById',\r\n\t'places.getCheckins',\r\n\t'places.getTypes',\r\n\t'places.search',\r\n\r\n\t/**\r\n\t * Polls\r\n\t * Методы для работы с опросами.\r\n\t */\r\n\t'polls.addVote',\r\n\t'polls.create',\r\n\t'polls.deleteVote',\r\n\t'polls.edit',\r\n\t'polls.getById',\r\n\t'polls.getVoters',\r\n\r\n\t/**\r\n\t * Search\r\n\t * Методы для работы с поиском\r\n\t */\r\n\t'search.getHints',\r\n\r\n\t/**\r\n\t * Secure\r\n\t * Административные методы\r\n\t */\r\n\t'secure.addAppEvent',\r\n\t'secure.checkToken',\r\n\t'secure.getAppBalance',\r\n\t'secure.getSMSHistory',\r\n\t'secure.getTransactionsHistory',\r\n\t'secure.getUserLevel',\r\n\t'secure.sendNotification',\r\n\t'secure.sendSMSNotification',\r\n\t'secure.setCounter',\r\n\t'secure.setUserLevel',\r\n\r\n\t/**\r\n\t * Stats\r\n\t * Методы для работы со статистикой\r\n\t */\r\n\t'stats.get',\r\n\t'stats.getPostReach',\r\n\t'stats.trackVisitor',\r\n\r\n\t/**\r\n\t * Status\r\n\t * Методы для работы со статусом\r\n\t */\r\n\t'status.get',\r\n\t'status.set',\r\n\r\n\t/**\r\n\t * Storage\r\n\t * Методы для работы с переменными в приложении\r\n\t */\r\n\t'storage.get',\r\n\t'storage.getKeys',\r\n\t'storage.set',\r\n\r\n\t/**\r\n\t * Users\r\n\t * Методы для работы с данными пользователей\r\n\t */\r\n\t'users.get',\r\n\t'users.getFollowers',\r\n\t'users.getNearby',\r\n\t'users.getSubscriptions',\r\n\t'users.isAppUser',\r\n\t'users.report',\r\n\t'users.search',\r\n\r\n\t/**\r\n\t * Utils\r\n\t * Служебные методы\r\n\t */\r\n\t'utils.checkLink',\r\n\t'utils.deleteFromLastShortened',\r\n\t'utils.getLastShortenedLinks',\r\n\t'utils.getLinkStats',\r\n\t'utils.getServerTime',\r\n\t'utils.getShortLink',\r\n\t'utils.resolveScreenName',\r\n\r\n\t/**\r\n\t * Video\r\n\t * Методы для работы с видеозаписями\r\n\t */\r\n\t'video.add',\r\n\t'video.addAlbum',\r\n\t'video.addToAlbum',\r\n\t'video.createComment',\r\n\t'video.delete',\r\n\t'video.deleteAlbum',\r\n\t'video.deleteComment',\r\n\t'video.edit',\r\n\t'video.editAlbum',\r\n\t'video.editComment',\r\n\t'video.get',\r\n\t'video.getAlbumById',\r\n\t'video.getAlbums',\r\n\t'video.getAlbumsByVideo',\r\n\t'video.getCatalog',\r\n\t'video.getCatalogSection',\r\n\t'video.getComments',\r\n\t'video.hideCatalogSection',\r\n\t'video.removeFromAlbum',\r\n\t'video.reorderAlbums',\r\n\t'video.reorderVideos',\r\n\t'video.report',\r\n\t'video.reportComment',\r\n\t'video.restore',\r\n\t'video.restoreComment',\r\n\t'video.save',\r\n\t'video.search',\r\n\t/* Неофициально */\r\n\t'video.getRecommendedLiveVideos',\r\n\r\n\t/**\r\n\t * Wall\r\n\t * Методы для работы с записями на стене\r\n\t */\r\n\t'wall.createComment',\r\n\t'wall.delete',\r\n\t'wall.deleteComment',\r\n\t'wall.edit',\r\n\t'wall.editAdsStealth',\r\n\t'wall.editComment',\r\n\t'wall.get',\r\n\t'wall.getById',\r\n\t'wall.getComments',\r\n\t'wall.getReposts',\r\n\t'wall.pin',\r\n\t'wall.post',\r\n\t'wall.postAdsStealth',\r\n\t'wall.reportComment',\r\n\t'wall.reportPost',\r\n\t'wall.repost',\r\n\t'wall.restore',\r\n\t'wall.restoreComment',\r\n\t'wall.search',\r\n\t'wall.unpin',\r\n\r\n\t/**\r\n\t * Widgets\r\n\t * Методы для работы с виджетами на внешних сайтах\r\n\t */\r\n\t'widgets.getComments',\r\n\t'widgets.getPages'\r\n];\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/auth/direct.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\nconst cheerio = require('cheerio').load;\r\nconst debug = require('debug')('vk-io:auth');\r\nconst parseQuery = require('querystring').parse;\r\n\r\nconst AuthError = require('../errors/auth');\r\nconst RequestError = require('../errors/request');\r\nconst { parseForm, parseSecurityForm } = require('./helpers');\r\nconst { API_VERSION, USER_AGENT, AUTH_ERRORS } = require('../util/constants');\r\n\r\nconst {\r\n\tPAGE_BLOCKED,\r\n\tMISSING_CAPTCHA,\r\n\tINVALID_PHONE_NUMBER,\r\n\tAUTHORIZATION_FAILED\r\n} = AUTH_ERRORS;\r\n\r\n/**\r\n * Прямая авторизация\r\n *\r\n * @public\r\n */\r\nclass DirectAuth {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}     vk\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor (vk, { app, key }) {\r\n\t\tthis.vk = vk;\r\n\r\n\t\tthis.app = app;\r\n\t\tthis.key = key;\r\n\r\n\t\tthis._captchaAttempts = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Делает запрос\r\n\t *\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\trequest (options) {\r\n\t\treturn this._request(options)\r\n\t\t.catch((error) => {\r\n\t\t\tthrow new RequestError(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Запускает авторизацию\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\trun () {\r\n\t\tthis._request = this.vk.request.defaults({\r\n\t\t\tfollowAllRedirects: true,\r\n\t\t\tresolveWithFullResponse: true,\r\n\t\t\theaders: {\r\n\t\t\t\t'User-Agent': USER_AGENT\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn this._getToken()\r\n\t\t.then((response) => (\r\n\t\t\tthis._route(response)\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n\t * Производит действия с авторизаций\r\n\t *\r\n\t * @param {Object} response\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_route (response) {\r\n\t\tif (!('error' in response)) {\r\n\t\t\tconst params = {\r\n\t\t\t\tuser: +response.user_id,\r\n\t\t\t\ttoken: response.access_token,\r\n\t\t\t\texpires: +response.expires_in\r\n\t\t\t};\r\n\r\n\t\t\tif ('email' in response) {\r\n\t\t\t\tparams.email = response.email;\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.resolve(params);\r\n\t\t}\r\n\r\n\t\tif (response.error === 'need_captcha') {\r\n\t\t\tdebug('Captcha processing');\r\n\r\n\t\t\treturn this._passageCaptcha(response);\r\n\t\t}\r\n\r\n\t\tif (response.error === 'need_validation') {\r\n\t\t\tdebug('Processes the authorization confirm number');\r\n\r\n\t\t\treturn this._securityPhoneCheck(response);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(new AuthError({\r\n\t\t\tmessage: response.error,\r\n\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Прохождение валидации телефона\r\n\t *\r\n\t * @param {Object} response\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_securityPhoneCheck ({ redirect_uri: redirect }) {\r\n\t\tif (redirect.includes('act=blocked')) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Page blocked',\r\n\t\t\t\tcode: PAGE_BLOCKED\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this.request({\r\n\t\t\turi: redirect,\r\n\t\t\tmethod: 'GET',\r\n\t\t\tjson: false\r\n\t\t})\r\n\t\t.then((response) => {\r\n\t\t\tconst { action, fields } = parseSecurityForm(response, this.vk.options);\r\n\r\n\t\t\treturn this.request({\r\n\t\t\t\turi: action,\r\n\t\t\t\tform: fields,\r\n\t\t\t\tmethod: 'POST'\r\n\t\t\t})\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconst $ = cheerio(response.body);\r\n\r\n\t\t\t\tif ($('input[name=\"code\"]').length !== 0) {\r\n\t\t\t\t\tthrow new AuthError({\r\n\t\t\t\t\t\tmessage: 'Invalid phone number',\r\n\t\t\t\t\t\tcode: INVALID_PHONE_NUMBER\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst hash = parseQuery((response.request.uri.hash || '').replace(/^#/, ''));\r\n\r\n\t\t\t\tif ('success' in hash && 'access_token' in hash) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tuser: +hash.user_id,\r\n\t\t\t\t\t\ttoken: hash.access_token,\r\n\t\t\t\t\t\texpires: +response.expires_in || 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow new AuthError({\r\n\t\t\t\t\tmessage: 'Failed to get token',\r\n\t\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Обработка капчи\r\n\t *\r\n\t * @param {Object} response\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_passageCaptcha ({ captcha_sid: sid, captcha_img: img }) {\r\n\t\tif (this.vk._captchaHandler === null) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Missing captcha handler',\r\n\t\t\t\tcode: MISSING_CAPTCHA\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif (this._captchaAttempts >= this.vk.options.authCaptcha) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Maximum attempts passage captcha',\r\n\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.vk._captchaHandler(img, sid, (key) => (\r\n\t\t\t\tnew Promise((resolveCaptcha, rejectCaptcha) => {\r\n\t\t\t\t\tthis._getToken({\r\n\t\t\t\t\t\tcaptcha_sid: sid,\r\n\t\t\t\t\t\tcaptcha_key: key\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\tif ('error' in response && 'captcha_img' in response) {\r\n\t\t\t\t\t\t\trejectCaptcha();\r\n\r\n\t\t\t\t\t\t\tthis._passageCaptcha(response)\r\n\t\t\t\t\t\t\t.then(resolve)\r\n\t\t\t\t\t\t\t.catch(reject);\r\n\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresolveCaptcha();\r\n\r\n\t\t\t\t\t\tthis._route(response)\r\n\t\t\t\t\t\t.then(resolve)\r\n\t\t\t\t\t\t.catch(reject);\r\n\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\trejectCaptcha(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Запрашивает данные для токена\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_getToken (qs = {}) {\r\n\t\tconst { login, phone, pass, scope } = this.vk.options;\r\n\r\n\t\treturn this.vk.request({\r\n\t\t\turi: 'https://oauth.vk.com/token',\r\n\t\t\tmethod: 'GET',\r\n\t\t\tqs: Object.assign({}, {\r\n\t\t\t\tgrant_type: 'password',\r\n\t\t\t\tclient_secret: this.key,\r\n\t\t\t\tclient_id: this.app,\r\n\t\t\t\t'2fa_supported': 0,\r\n\t\t\t\tusername: login || phone,\r\n\t\t\t\tpassword: pass,\r\n\t\t\t\tv: API_VERSION,\r\n\t\t\t\tscope\r\n\t\t\t}, qs),\r\n\t\t\tsimple: false\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tthrow new RequestError(error);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = DirectAuth;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/auth.js":"'use strict';\r\n\r\nconst VKError = require('./vk');\r\n\r\nconst { AUTH_ERRORS } = require('../util/constants');\r\n\r\nconst { AUTHORIZATION_FAILED } = AUTH_ERRORS;\r\n\r\n/**\r\n * Обработка ошибок execute\r\n *\r\n * @public\r\n */\r\nclass AuthError extends VKError {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {string} message\r\n\t */\r\n\tconstructor ({ message, code = AUTHORIZATION_FAILED }) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.message = message;\r\n\t\tthis.code = code;\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = AuthError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/auth/helpers.js":"'use strict';\r\n\r\nconst cheerio = require('cheerio').load;\r\nconst { decode: decodeCp1251 } = require('iconv-lite');\r\n\r\nconst AuthError = require('../errors/auth');\r\n\r\n/**\r\n * Парсирит форму\r\n *\r\n * @param {Cheerio} $\r\n *\r\n * @return {Object}\r\n */\r\nfunction parseForm($) {\r\n\tconst $form = $('form[action][method]');\r\n\r\n\tconst fields = {};\r\n\r\n\tfor (const { name, value } of $form.serializeArray()) {\r\n\t\tfields[name] = value;\r\n\t}\r\n\r\n\treturn {\r\n\t\taction: $form.attr('action'),\r\n\t\tfields\r\n\t};\r\n}\r\n\r\nexports.parseForm = parseForm;\r\n\r\n/**\r\n * Разбирает форму безопасности\r\n *\r\n * @param {Object}  response\r\n * @param {Object}  options\r\n * @param {cheerio} $\r\n *\r\n * @return {Object}\r\n */\r\nfunction parseSecurityForm(response, { login, phone }, $ = cheerio(response.body)) {\r\n\tlet number;\r\n\r\n\tif (phone !== null) {\r\n\t\tnumber = phone;\r\n\t} else if (login !== null && !login.includes('@')) {\r\n\t\tnumber = login;\r\n\t} else {\r\n\t\tthrow new AuthError({\r\n\t\t\tmessage: 'Missing phone number in the phone or login field'\r\n\t\t});\r\n\t}\r\n\r\n\tif (typeof number === 'string') {\r\n\t\tnumber = number.trim().replace(/^(\\+|00)/, '');\r\n\t}\r\n\r\n\tconst $field = $('.field_prefix');\r\n\r\n\tconst prefix = $field.first().text().trim().replace('+', '').length;\r\n\tconst postfix  = $field.last().text().trim().length;\r\n\r\n\tnumber = number.toString();\r\n\r\n\tlet { action, fields } = parseForm($);\r\n\r\n\tfields.code = number.slice(prefix, number.length - postfix);\r\n\r\n\tif (!action.startsWith('https://')) {\r\n\t\taction = 'https://' + response.request.uri.host + action;\r\n\t}\r\n\r\n\treturn {\r\n\t\taction,\r\n\t\tfields\r\n\t};\r\n}\r\n\r\nexports.parseSecurityForm = parseSecurityForm;\r\n\r\n/**\r\n * Конвентирует CP1251 в UTF-8\r\n *\r\n * @param {string} str\r\n *\r\n * @return {string}\r\n */\r\nexports.decodeCp1251 = (str) => (\r\n\tdecodeCp1251(Buffer.from(str, 'binary'), 'win1251')\r\n);\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/auth/standalone.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\nconst cheerio = require('cheerio').load;\r\nconst request = require('request-promise');\r\nconst debug = require('debug')('vk-io:auth');\r\nconst parseQuery = require('querystring').parse;\r\n\r\nconst AuthError = require('../errors/auth');\r\nconst RequestError = require('../errors/request');\r\nconst { API_VERSION, USER_AGENT, AUTH_ERRORS } = require('../util/constants');\r\nconst {\r\n\tparseForm,\r\n\tdecodeCp1251,\r\n\tparseSecurityForm\r\n} = require('./helpers');\r\n\r\nconst {\r\n\tPAGE_BLOCKED,\r\n\tMISSING_CAPTCHA,\r\n\tINVALID_PHONE_NUMBER,\r\n\tAUTHORIZATION_FAILED\r\n} = AUTH_ERRORS;\r\n\r\n/**\r\n * Автономное приложение\r\n *\r\n * @public\r\n */\r\nclass StandaloneAuth {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK} vk\r\n\t */\r\n\tconstructor (vk) {\r\n\t\tthis.vk = vk;\r\n\r\n\t\tthis.jar = request.jar();\r\n\r\n\t\tthis._captchaAttempts = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает CookieJar\r\n\t *\r\n\t * @return {CookieJar}\r\n\t */\r\n\tgetCookieJar () {\r\n\t\treturn this.jar;\r\n\t}\r\n\r\n\t/**\r\n\t * Устанавливает CookieJar\r\n\t * Вызывать до авторизации\r\n\t *\r\n\t * @param {CookieJar} jar\r\n\t *\r\n\t * @return {this}\r\n\t */\r\n\tsetCookieJar (jar) {\r\n\t\tthis.jar = jar;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает Cookie\r\n\t * vk.com - Для основного домена\r\n\t * login.vk.com - Для поддомена с авторизацией\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tgetCookie () {\r\n\t\treturn {\r\n\t\t\t'login.vk.com': this.jar.getCookieString('https://login.vk.com'),\r\n\t\t\t'vk.com': this.jar.getCookieString('https://vk.com')\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Выполняет запрос\r\n\t *\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\trequest (options) {\r\n\t\treturn this._request(options)\r\n\t\t.catch((error) => {\r\n\t\t\tconst { response } = error;\r\n\r\n\t\t\tif (typeof response === 'object' && 'body' in response) {\r\n\t\t\t\tlet body;\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbody = JSON.parse(response.body);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tthrow new RequestError(error);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow new AuthError({\r\n\t\t\t\t\tmessage: body.error + ', ' + body.error_description,\r\n\t\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthrow new RequestError(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Запускает авторизацию\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\trun () {\r\n\t\tthis._request = this.vk.request.defaults({\r\n\t\t\tjson: false,\r\n\t\t\tjar: this.jar,\r\n\t\t\tfollowAllRedirects: true,\r\n\t\t\tresolveWithFullResponse: true,\r\n\t\t\theaders: {\r\n\t\t\t\t'User-Agent': USER_AGENT\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn this._getBlank()\r\n\t\t.then((response) => (\r\n\t\t\tthis._route(response)\r\n\t\t))\r\n\t\t.then((response) => {\r\n\t\t\tconst hash = parseQuery((response.request.uri.hash || '').replace(/^#/, ''));\r\n\r\n\t\t\tif ('access_token' in hash) {\r\n\t\t\t\treturn hash.access_token;\r\n\t\t\t}\r\n\r\n\t\t\tthrow new AuthError({\r\n\t\t\t\tmessage: 'Failed to get token',\r\n\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Выбирает нужное действие\r\n\t *\r\n\t * @param {Object} response\r\n\t * @param {Cheeri} $\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_route (response, $ = cheerio(response.body)) {\r\n\t\tif ($('input[name=\"pass\"]').length !== 0) {\r\n\t\t\tdebug('Parse the authorization form');\r\n\r\n\t\t\treturn this._parseAuthForm(response, $);\r\n\t\t}\r\n\r\n\t\tif ($('input[name=\"code\"]').length !== 0) {\r\n\t\t\tconst { action, fields } = parseForm($);\r\n\r\n\t\t\tif (action.includes('act=authcheck_code')) {\r\n\t\t\t\tdebug('Processes the authorization code');\r\n\r\n\t\t\t\treturn this._authCheckCode(action, fields);\r\n\t\t\t}\r\n\r\n\t\t\tif (action.includes('act=security_check')) {\r\n\t\t\t\tdebug('Processes the authorization confirm number');\r\n\r\n\t\t\t\treturn this._securityPhoneCheck(response, $);\r\n\t\t\t}\r\n\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Unknown type of authorization check',\r\n\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst { path } = response.request.uri;\r\n\r\n\t\tif (path && path.includes('act=blocked')) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Page blocked',\r\n\t\t\t\tcode: PAGE_BLOCKED\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tdebug('Getting an address for proof of rights');\r\n\r\n\t\tconst script = $('script[type=\"text/javascript\"][language=\"javascript\"]').text();\r\n\t\tconst locations = script.match(/location\\.href\\s+=\\s+\\\"([^\\\"]+)\\\"/i);\r\n\r\n\t\tif (locations !== null) {\r\n\t\t\treturn this.request({\r\n\t\t\t\turi: locations[1].replace('&cancel=1', '')\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(new AuthError({\r\n\t\t\tmessage: 'Could not log in',\r\n\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * Проверка номера телефона при заходе с других мест\r\n\t *\r\n\t * @param {Object} response\r\n\t * @param {Cheeri} $\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_securityPhoneCheck (response, $) {\r\n\t\tconst { action, fields } = parseSecurityForm(response, this.vk.options, $);\r\n\r\n\t\treturn this.request({\r\n\t\t\turi: action,\r\n\t\t\tform: fields,\r\n\t\t\tmethod: 'POST'\r\n\t\t})\r\n\t\t.then((response) => {\r\n\t\t\tconst $ = cheerio(response.body);\r\n\r\n\t\t\tif ($('input[name=\"code\"]').length !== 0) {\r\n\t\t\t\tthrow new AuthError({\r\n\t\t\t\t\tmessage: 'Invalid phone number',\r\n\t\t\t\t\tcode: INVALID_PHONE_NUMBER\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn this._route(response, $);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Проверяет код для авторизации через приложение\r\n\t *\r\n\t * @param {string} action\r\n\t * @param {Object} fields\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_authCheckCode (action, fields) {\r\n\t\treturn Promise.reject(\r\n\t\t\tnew AuthError({\r\n\t\t\t\tmessage: 'Verification of authorization code is not supported',\r\n\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Обрабатывает форму авторизации\r\n\t *\r\n\t * @param {Object}  response\r\n\t * @param {Cheerio} $\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_parseAuthForm (response, $) {\r\n\t\tconst { action, fields } = parseForm($);\r\n\r\n\t\tconst { login, phone, pass } = this.vk.options;\r\n\r\n\t\tfields.email = login || phone;\r\n\t\tfields.pass = pass;\r\n\r\n\t\tif ('captcha_sid' in fields) {\r\n\t\t\tconst src = $('.oauth_captcha').attr('src');\r\n\r\n\t\t\treturn this._passageCaptcha(action, fields, src);\r\n\t\t}\r\n\r\n\t\treturn this._sendAuthForm(action, fields)\r\n\t\t.then((response) => {\r\n\t\t\tconst $ = cheerio(response.body);\r\n\r\n\t\t\tconst $error = $('.box_error');\r\n\r\n\t\t\tif ($error.length !== 0) {\r\n\t\t\t\tthrow new AuthError({\r\n\t\t\t\t\tmessage: 'Auth form error: ' + decodeCp1251($error.text()),\r\n\t\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn this._route(response, $);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Отправляет форму авторизации\r\n\t *\r\n\t * @param {string} action\r\n\t * @param {Object} fields\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_sendAuthForm (action, fields) {\r\n\t\treturn this.request({\r\n\t\t\turi: action,\r\n\t\t\tform: fields,\r\n\t\t\tmethod: 'POST',\r\n\t\t\tencoding: 'binary'\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Проходит капчу\r\n\t *\r\n\t * @param {string} action\r\n\t * @param {Object} fields\r\n\t * @param {Object} src\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_passageCaptcha (action, fields, src) {\r\n\t\tif (this.vk._captchaHandler === null) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Missing captcha handler',\r\n\t\t\t\tcode: MISSING_CAPTCHA\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif (this._captchaAttempts >= this.vk.options.authCaptcha) {\r\n\t\t\treturn Promise.reject(new AuthError({\r\n\t\t\t\tmessage: 'Maximum attempts passage captcha',\r\n\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.vk._captchaHandler(src, fields.captcha_sid, (key) => (\r\n\t\t\t\tnew Promise((resolveCaptcha, rejectCaptcha) => {\r\n\t\t\t\t\tfields.captcha_key = key;\r\n\r\n\t\t\t\t\tthis._sendAuthForm(action, fields)\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\tconst $ = cheerio(response.body);\r\n\r\n\t\t\t\t\t\tconst $error = $('.box_error');\r\n\r\n\t\t\t\t\t\tif ($error.length === 0) {\r\n\t\t\t\t\t\t\tresolveCaptcha();\r\n\r\n\t\t\t\t\t\t\tthis._route(response, $)\r\n\t\t\t\t\t\t\t.then(resolve)\r\n\t\t\t\t\t\t\t.catch(reject);\r\n\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trejectCaptcha();\r\n\r\n\t\t\t\t\t\tconst text = decodeCp1251($error.text());\r\n\r\n\t\t\t\t\t\tif (!text.includes('Код с картинки введён неверно')) {\r\n\t\t\t\t\t\t\treturn reject(new AuthError({\r\n\t\t\t\t\t\t\t\tmessage: 'Auth form error: ' + text,\r\n\t\t\t\t\t\t\t\tcode: AUTHORIZATION_FAILED\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdebug('Captcha incorrect');\r\n\r\n\t\t\t\t\t\tthis._parseAuthForm(response, $)\r\n\t\t\t\t\t\t.then(resolve)\r\n\t\t\t\t\t\t.catch(reject);\r\n\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\trejectCaptcha(error);\r\n\t\t\t\t\t});\r\n\t\t\t\t})\r\n\t\t\t));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Получает бланк авторизации\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_getBlank () {\r\n\t\tconst { app, scope } = this.vk.options;\r\n\r\n\t\treturn this.request({\r\n\t\t\turi: 'https://oauth.vk.com/authorize',\r\n\t\t\tmethod: 'GET',\r\n\t\t\tqs: {\r\n\t\t\t\tredirect_uri: 'https://oauth.vk.com/blank.html',\r\n\t\t\t\tgrant_type: 'client_credentials',\r\n\t\t\t\tresponse_type: 'token',\r\n\t\t\t\tdisplay: 'page',\r\n\t\t\t\tclient_id: app,\r\n\t\t\t\tv: API_VERSION,\r\n\t\t\t\tscope: scope,\r\n\t\t\t\trevoke: 1\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = StandaloneAuth;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/api.js":"'use strict';\r\n\r\nconst VKError = require('./vk');\r\n\r\n/**\r\n * Обработка ошибок VK API\r\n *\r\n * @public\r\n *\r\n * @property {number} [code] Код ошибки\r\n * @property {string} [message] Текст ошибки\r\n * @property {Array}  [params] Присланные параметры\r\n *\r\n * @property {?number} [captchaSid] SID капчи\r\n * @property {?string} [captchaSid] Ссылшка на изображение капчи\r\n *\r\n * @property {?string} [redirectUri] Ссылка для подтверждения\r\n */\r\nclass ApiError extends VKError {\r\n\t/**\r\n\t * Конструктор\r\n\t */\r\n\tconstructor (error) {\r\n\t\tsuper(`Code №${error.error_code}. ${error.error_msg}`);\r\n\r\n\t\tthis.code = +error.error_code;\r\n\t\tthis.message = error.error_msg;\r\n\t\tthis.params = error.request_params;\r\n\r\n\t\tif (this.code === 14) {\r\n\t\t\tthis.captchaSid = +error.captcha_sid;\r\n\t\t\tthis.captchaImg = error.captcha_img;\r\n\t\t}\r\n\r\n\t\tif (this.code === 17) {\r\n\t\t\tthis.redirectUri = error.redirect_uri;\r\n\t\t}\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = ApiError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/vk.js":"'use strict';\r\n\r\n/**\r\n * Класс общих ошибок ВКонтакте\r\n *\r\n * @public\r\n */\r\nclass VKError extends Error {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {mixed} error\r\n\t */\r\n\tconstructor (error) {\r\n\t\tsuper(error);\r\n\r\n\t\tthis.name = this.constructor.name;\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = VKError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/execute.js":"'use strict';\r\n\r\nconst VKError = require('./vk');\r\n\r\n/**\r\n * Обработка ошибок execute\r\n *\r\n * @public\r\n */\r\nclass ExecuteError extends VKError {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {Object} error\r\n\t */\r\n\tconstructor (error) {\r\n\t\tsuper(`Code №${error.error_code}. ${error.error_msg}`);\r\n\r\n\t\tthis.method = error.method;\r\n\t\tthis.code = +error.error_code;\r\n\t\tthis.message = error.error_msg;\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = ExecuteError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/request.js":"'use strict';\r\n\r\nconst VKError = require('./vk');\r\n\r\n/**\r\n * Обработка HTTP ошибок запросов\r\n *\r\n * @public\r\n */\r\nclass RequestError extends VKError {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {Object} error\r\n\t */\r\n\tconstructor (error) {\r\n\t\tsuper(error.message);\r\n\r\n\t\tthis.message = error.message;\r\n\r\n\t\tif ('statusCode' in error) {\r\n\t\t\tthis.statusCode = +error.statusCode;\r\n\t\t}\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = RequestError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/errors/upload.js":"'use strict';\r\n\r\nconst VKError = require('./vk');\r\n\r\n/**\r\n * Обработка ошибок execute\r\n *\r\n * @public\r\n */\r\nclass UploadError extends VKError {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {Object} error\r\n\t */\r\n\tconstructor ({ error }) {\r\n\t\tsuper(error);\r\n\r\n\t\tthis.message = error;\r\n\r\n\t\tif ('captureStackTrace' in Error) {\r\n\t\t\tError.captureStackTrace(this, this.constructor.name);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = UploadError;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/execute/chain.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\n\r\nconst { getMethodApi, getChainCode, resolvePromisesTask } = require('../util/helpers');\r\n\r\n/**\r\n * Создаёт цепочку методов которые выполняются через execute\r\n *\r\n * @public\r\n */\r\nclass Chain {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK} vk\r\n\t */\r\n\tconstructor (vk) {\r\n\t\tthis.vk = vk;\r\n\r\n\t\tthis._queue = [];\r\n\t\tthis._isRun = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Упрощённое объеденение execute\r\n\t *\r\n\t * @param {VK}     vk\r\n\t * @param {string} method\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tstatic executes (vk, method, queues) {\r\n\t\tconst promises = [];\r\n\r\n\t\twhile (queues.length !== 0) {\r\n\t\t\tconst code = getChainCode(\r\n\t\t\t\tqueues.splice(0, 25).map((params) => getMethodApi(method, params))\r\n\t\t\t);\r\n\r\n\t\t\tpromises.push(\r\n\t\t\t\tvk.api.execute({\r\n\t\t\t\t\tcode: code\r\n\t\t\t\t})\r\n\t\t\t\t.then(({ response }) => response)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn Promise.all(promises)\r\n\t\t.then((responses) => Array.prototype.concat.apply([], responses));\r\n\t}\r\n\r\n\t/**\r\n\t * Добавляет метод в цепочку\r\n\t *\r\n\t * @param {string} method\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tappend (method, params = {}) {\r\n\t\tif (this._isRun) {\r\n\t\t\tthrow new Error('Chain завершил работу!');\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._queue.push({\r\n\t\t\t\tmethod: getMethodApi(method, params),\r\n\t\t\t\tresolve,\r\n\t\t\t\treject\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Выполняет цепочку методов\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\texecute () {\r\n\t\tthis._isRun = true;\r\n\r\n\t\tif (this._queue.length === 0) {\r\n\t\t\treturn Promise.resolve([]);\r\n\t\t}\r\n\r\n\t\tconst promises = [];\r\n\t\tconst queues = this._queue;\r\n\r\n\t\twhile (queues.length !== 0) {\r\n\t\t\tconst tasks = queues.splice(0, 25);\r\n\r\n\t\t\tpromises.push(\r\n\t\t\t\tthis.vk.api.execute({\r\n\t\t\t\t\tcode: getCode(tasks)\r\n\t\t\t\t})\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tresolvePromisesTask(tasks, result);\r\n\r\n\t\t\t\t\treturn result.response;\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tfor (const task of tasks) {\r\n\t\t\t\t\t\ttask.reject(error);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn Promise.all(promises)\r\n\t\t.then((responses) => Array.prototype.concat.apply([], responses));\r\n\t}\r\n\r\n\t/**\r\n\t * Сокращение для execute -> then\r\n\t *\r\n\t * @param  {function} handler\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tthen (handler) {\r\n\t\treturn this.execute().then(handler);\r\n\t}\r\n\r\n\t/**\r\n\t * Сокращение для execute -> catch\r\n\t *\r\n\t * @param {function} handler\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tcatch (handler) {\r\n\t\treturn this.execute().catch(handler);\r\n\t}\r\n}\r\n\r\n/**\r\n * Возвращает код из массива\r\n *\r\n * @param {Array} queues\r\n *\r\n * @return {string}\r\n */\r\nfunction getCode(queues) {\r\n\treturn getChainCode(queues.map((queue) => queue.method));\r\n}\r\n\r\nmodule.exports = Chain;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/util/helpers.js":"'use strict';\r\n\r\n/**\r\n * Возвращает метод с параметрами для execute\r\n *\r\n * @param {string} method\r\n * @param {Object} params\r\n *\r\n * @return {string}\r\n */\r\nexports.getMethodApi = (method, params = {}) => (\r\n\t`API.${method}(${JSON.stringify(params)})`\r\n);\r\n\r\n/**\r\n * Возвращает очередь из методов\r\n *\r\n * @param {Array} chain\r\n *\r\n * @return {string}\r\n */\r\nexports.getChainCode = (chain) => (\r\n\t`return [${chain.join(',')}];`\r\n);\r\n\r\n/**\r\n * Обрабатывает стак promise\r\n *\r\n * @param {Array} tasks\r\n * @param {Array} result\r\n */\r\nfunction resolvePromisesTask(tasks, result) {\r\n\tlet errors = 0;\r\n\r\n\tresult.response.forEach((response, i) => {\r\n\t\tif (response !== false) {\r\n\t\t\treturn tasks[i].resolve(response);\r\n\t\t}\r\n\r\n\t\ttasks[i].reject(result.errors[errors++]);\r\n\t});\r\n}\r\n\r\nexports.resolvePromisesTask = resolvePromisesTask;\r\n\r\n/**\r\n * Возвращает рандомный ID\r\n *\r\n * @return {number}\r\n */\r\nexports.getRandomId = () => (\r\n\t(Math.floor(Math.random() * 1e3) + '') + Date.now()\r\n);\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/execute/collect.js":"'use strict';\r\n\r\nconst { METHODS_LIMIT } = require('../util/constants');\r\n\r\nconst CollectStream = require('./stream');\r\n\r\n/**\r\n * Работа с потоками для получения из ВКонтакте\r\n *\r\n * @public\r\n */\r\nclass Collect {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK} vk\r\n\t */\r\n\tconstructor (vk) {\r\n\t\tthis.vk = vk;\r\n\r\n\t\tfor (const [method, limit, max] of METHODS_LIMIT) {\r\n\t\t\tconst [group, name] = method.split('.');\r\n\r\n\t\t\tif (!(group in this)) {\r\n\t\t\t\tthis[group] = {};\r\n\t\t\t}\r\n\r\n\t\t\tthis[group][name] = (params = {}) => (\r\n\t\t\t\tnew CollectStream(this.vk, {\r\n\t\t\t\t\tmethod,\r\n\t\t\t\t\tparams,\r\n\t\t\t\t\tlimit,\r\n\t\t\t\t\tmax\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = Collect;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/util/constants.js":"'use strict';\r\n\r\n/**\r\n * Версия ВКонтакте API\r\n *\r\n * @type {string}\r\n */\r\nexports.API_VERSION = '5.63';\r\n\r\n/**\r\n * Адрес API методов\r\n *\r\n * @type {string}\r\n */\r\nexports.API_URI = 'https://api.vk.com/method/';\r\n\r\n/**\r\n * User-Agent пользователя\r\n *\r\n * @type {string}\r\n */\r\nconst USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\r\n+ ' (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36';\r\n\r\nexports.USER_AGENT = USER_AGENT;\r\n\r\n/**\r\n * Получение ID чата из peer\r\n *\r\n * @type {number}\r\n */\r\nexports.SHEAR_CHAT_PEER = 2e9;\r\n\r\n/**\r\n * Полный список разрешений авторизации\r\n *\r\n * @type {Array}\r\n */\r\nconst MAX_SCOPE = [\r\n\t'notify',\r\n\t'friends',\r\n\t'photos',\r\n\t'audio',\r\n\t'video',\r\n\t'pages',\r\n\t'status',\r\n\t'notes',\r\n\t'messages',\r\n\t'wall',\r\n\t'ads',\r\n\t'offline',\r\n\t'docs',\r\n\t'groups',\r\n\t'notifications',\r\n\t'stats',\r\n\t'email',\r\n\t'market'\r\n];\r\n\r\nexports.MAX_SCOPE = MAX_SCOPE;\r\n\r\n/**\r\n * Список ошибок авторизации\r\n *\r\n * @type {Object}\r\n */\r\nconst AUTH_ERRORS = {\r\n\tPAGE_BLOCKED: 'PAGE_BLOCKED',\r\n\tMISSING_CAPTCHA: 'MISSING_CAPTCHA',\r\n\tINVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\r\n\tAUTHORIZATION_FAILED: 'AUTHORIZATION_FAILED',\r\n};\r\n\r\nexports.AUTH_ERRORS = AUTH_ERRORS;\r\n\r\n/**\r\n * Список ограничений на методы\r\n *\r\n * @type {Array}\r\n */\r\nexports.METHODS_LIMIT = [\r\n\t/**\r\n\t * Account\r\n\t */\r\n\t['account.getActiveOffers', 100],\r\n\t['account.getBanned', 200],\r\n\r\n\t/**\r\n\t * Ads\r\n\t */\r\n\t['ads.getAds', 100, 2000],\r\n\t['ads.getAdsLayout', 100, 2000],\r\n\t['ads.getAdsTargeting', 100, 2000],\r\n\r\n\t/**\r\n\t * Apps\r\n\t */\r\n\t['apps.getCatalog', 100],\r\n\t['apps.getFriendsList', 5000],\r\n\r\n\t/**\r\n\t * Audio\r\n\t */\r\n\t['audio.get', 6000],\r\n\t['audio.search', 300, 1000],\r\n\t['audio.getAlbums', 100],\r\n\t['audio.getRecommendations', 1000],\r\n\t['audio.getPopular', 1000],\r\n\r\n\t/**\r\n\t * Board\r\n\t */\r\n\t['board.getComments', 100],\r\n\t['board.getTopics', 100],\r\n\r\n\t/**\r\n\t * Database\r\n\t */\r\n\t['database.getChairs', 10000],\r\n\t['database.getCities', 1000],\r\n\t['database.getCountries', 1000],\r\n\t['database.getFaculties', 10000],\r\n\t['database.getRegions', 1000],\r\n\t['database.getSchools', 10000],\r\n\t['database.getUniversities', 10000],\r\n\r\n\t/**\r\n\t * Docs\r\n\t */\r\n\t['docs.get', 2000, 2000],\r\n\t['docs.search', 1000, 1000],\r\n\r\n\t/**\r\n\t * Fave\r\n\t */\r\n\t['fave.getLinks', 100],\r\n\t['fave.getMarketItems', 100],\r\n\t['fave.getPhotos', 100],\r\n\t['fave.getUsers', 100],\r\n\t['fave.getVideos', 100],\r\n\r\n\t/**\r\n\t * Friends\r\n\t */\r\n\t['friends.get', 1000],\r\n\t['friends.getMutual', 1000],\r\n\t['friends.getMutual', 1000],\r\n\t['friends.getOnline', 1000],\r\n\t['friends.getRecent', 1000],\r\n\t['friends.getRequests', 1000],\r\n\t['friends.getSuggestions', 500],\r\n\t['friends.search', 1000],\r\n\r\n\t/**\r\n\t * Gifts\r\n\t */\r\n\t['gifts.get', 100],\r\n\r\n\t/**\r\n\t * Groups\r\n\t */\r\n\t['groups.get', 1000],\r\n\t['groups.getBanned', 200],\r\n\t['groups.getInvitedUsers', 100],\r\n\t['groups.getInvites', 100],\r\n\t['groups.getMembers', 1000],\r\n\t['groups.getRequests', 200],\r\n\r\n\t/**\r\n\t * Leads\r\n\t */\r\n\t['leads.getUsers', 1000],\r\n\r\n\t/**\r\n\t * Likes\r\n\t */\r\n\t['likes.getList', 100],\r\n\r\n\t/**\r\n\t * Market\r\n\t */\r\n\t['market.get', 200],\r\n\t['market.getAlbums', 100],\r\n\t['market.getCategories', 1000],\r\n\t['market.getComments', 100],\r\n\t['market.search', 200],\r\n\r\n\t/**\r\n\t * messages\r\n\t */\r\n\t['messages.get', 200],\r\n\t['messages.getDialogs', 200],\r\n\t['messages.getHistory', 200],\r\n\t['messages.search', 100],\r\n\r\n\t/**\r\n\t * Newsfeed\r\n\t * TODO: Сделать остальные методы\r\n\t */\r\n\t['newsfeed.getMentions', 50],\r\n\t['newsfeed.getSuggestedSources', 1000],\r\n\r\n\t/**\r\n\t * Notification\r\n\t * TODO: Сделать методы\r\n\t */\r\n\r\n\t/**\r\n\t * Notes\r\n\t */\r\n\t['notes.get', 100],\r\n\t['notes.getComments', 100],\r\n\r\n\t/**\r\n\t * Orders\r\n\t */\r\n\t['orders.get', 1000],\r\n\r\n\t/**\r\n\t * Photos\r\n\t */\r\n\t['photos.get', 1000],\r\n\t['photos.getAlbums', 100],\r\n\t['photos.getAll', 200],\r\n\t['photos.getAllComments', 100],\r\n\t['photos.getComments', 100],\r\n\t['photos.getNewTags', 100],\r\n\t['photos.getUserPhotos', 1000],\r\n\t['photos.search', 1000],\r\n\r\n\t/**\r\n\t * Places\r\n\t */\r\n\t['places.getCheckins', 100],\r\n\t['places.search', 1000],\r\n\r\n\t/**\r\n\t * Polls\r\n\t */\r\n\t['polls.getVoters', 100],\r\n\r\n\t/**\r\n\t * Storage\r\n\t */\r\n\t['storage.getKeys', 1000],\r\n\r\n\t/**\r\n\t * Users\r\n\t */\r\n\t['users.getFollowers', 1000],\r\n\t['users.getSubscriptions', 200],\r\n\t['users.search', 1000, 1000],\r\n\r\n\t/**\r\n\t * Utils\r\n\t */\r\n\t['utils.getLastShortenedLinks', 50],\r\n\r\n\t/**\r\n\t * Video\r\n\t */\r\n\t['video.get', 200],\r\n\t['video.getAlbums', 100],\r\n\t['video.getComments', 100],\r\n\t['video.search', 1000, 1000],\r\n\r\n\t/**\r\n\t * Wall\r\n\t */\r\n\t['wall.get', 100],\r\n\t['wall.getComments', 100],\r\n\t['wall.getReposts', 1000],\r\n\t['wall.search', 100],\r\n\r\n\t/**\r\n\t * Widgets\r\n\t */\r\n\t['widgets.getComments', 200],\r\n\t['widgets.getPages', 200]\r\n];\r\n\r\n/**\r\n * Основные опции\r\n *\r\n * @typedef {Object} MainOptions\r\n *\r\n * @property {?number} [id] Идентификатор пользователя\r\n *\r\n * @property {?string} [login] Email/телефон от аккаунта\r\n * @property {?number} [phone] Номер телефона\r\n * @property {?string} [pass]  Пароль от аккаунта\r\n *\r\n * @property {?string} [token] Токен\r\n *\r\n * @property {?number} [app]   Приложение\r\n * @property {?string} [key]   Секретный ключ приложения\r\n * @property {string}  [scope] Список разрешений\r\n *\r\n * @property {string}  [lang]      Язык на котором возвращаются данные\r\n * @property {string}  [call]      Режим вызова методов\r\n * @property {number}  [limit]     Максимальное количество запросов в секунду\r\n * @property {number}  [timeout]   Время сброса соединения на API\r\n * @property {number}  [callCount] Максимальное количество вызовов методов в execute за раз\r\n *\r\n * @property {?number} [authCaptcha]  Количество попыток пройти капчу\r\n * \r\n * @property {number} [longpollCount] Количество попыток перезапуска longpoll\r\n * @property {number} [longpollWait]  Время ожидания перезапуска\r\n *\r\n * @property {boolean} [restartError] Перезапускать ли при ошибках запрос\r\n * @property {number}  [restartCount] Количество попыток перезапуска\r\n * @property {number}  [restartWait]  Время ожидания перезапуска\r\n */\r\nexports.defaultMainOptions = {\r\n\tid: null,\r\n\r\n\tlogin: null,\r\n\tphone: null,\r\n\tpass: null,\r\n\r\n\ttoken: null,\r\n\r\n\tapp: null,\r\n\tkey: null,\r\n\tscope: MAX_SCOPE.join(','),\r\n\r\n\tlang: null,\r\n\tcall: 'api',\r\n\tlimit: 3,\r\n\ttimeout: 6e3,\r\n\tcallCount: 25,\r\n\r\n\tauthCaptcha: 3,\r\n\r\n\tlongpollCount: 6,\r\n\tlongpollWait: 6e3,\r\n\r\n\trestartError: true,\r\n\trestartCount: 3,\r\n\trestartWait: 3e3\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/execute/stream.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\nconst { Readable } = require('stream');\r\nconst debug = require('debug')('vk-io:collect');\r\n\r\nconst { getMethodApi } = require('../util/helpers');\r\n\r\n/**\r\n * Позволяет получать коллекцию\r\n *\r\n * @public\r\n */\r\nclass CollectStream extends Readable {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}     vk\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor (vk, { params, method, limit, max }) {\r\n\t\tsuper({\r\n\t\t\tobjectMode: true\r\n\t\t});\r\n\r\n\t\tthis.vk = vk;\r\n\r\n\t\tif ('count' in params) {\r\n\t\t\tlet task = params.count;\r\n\r\n\t\t\tif (max !== undefined && task > max) {\r\n\t\t\t\ttask = max;\r\n\t\t\t}\r\n\r\n\t\t\tthis._task = task;\r\n\t\t} else {\r\n\t\t\tthis._task = max || 0;\r\n\t\t}\r\n\r\n\t\tlet maxCalls = 25;\r\n\r\n\t\tif ('maxCalls' in params) {\r\n\t\t\tmaxCalls = +params.maxCalls;\r\n\t\t\tdelete params.maxCalls;\r\n\r\n\t\t\tif (maxCalls < 2) {\r\n\t\t\t\tdebug('The minimum number of calls can be 2');\r\n\r\n\t\t\t\tmaxCalls = 2;\r\n\t\t\t} else if (maxCalls > 25) {\r\n\t\t\t\tdebug('The maximum number of calls can be 25');\r\n\r\n\t\t\t\tmaxCalls = 25;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tparams.count = limit;\r\n\r\n\t\tthis._received = 0;\r\n\t\tthis._skip = this._offset = +params.offset || 0;\r\n\r\n\t\tthis._code = getExecuteCode(method, params, {\r\n\t\t\tmaxCalls\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Сокращение для Promise then\r\n\t *\r\n\t * @param {function} handler\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tthen (handler) {\r\n\t\treturn this._promise().then(handler);\r\n\t}\r\n\r\n\t/**\r\n\t * Сокращение для Promise catch\r\n\t *\r\n\t * @param {function} handler\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tcatch (handler) {\r\n\t\treturn this._promise().catch(handler);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает promise\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\t_promise () {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst collect = [];\r\n\r\n\t\t\tthis\r\n\t\t\t.on('error', reject)\r\n\t\t\t.on('end', () => resolve(collect))\r\n\t\t\t.on('data', (items) => Array.prototype.push.apply(collect, items));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Запрашивает данные\r\n\t */\r\n\t_read () {\r\n\t\tconst notFirst = this._task !== 0 && this._received !== 0;\r\n\r\n\t\tif (notFirst && (this._task - this._skip) <= this._received) {\r\n\t\t\treturn this.push(null);\r\n\t\t}\r\n\r\n\t\tthis.vk.api.execute({\r\n\t\t\tcode: this._code,\r\n\t\t\ttask: this._task,\r\n\t\t\toffset: this._offset,\r\n\t\t\treceived: this._received\r\n\t\t})\r\n\t\t.then(({ response, errors }) => {\r\n\t\t\tif (errors.length !== 0) {\r\n\t\t\t\tthrow errors[0];\r\n\t\t\t}\r\n\r\n\t\t\tconst { length } = response.items;\r\n\r\n\t\t\tif (length === 0) {\r\n\t\t\t\treturn this.push(null);\r\n\t\t\t}\r\n\r\n\t\t\tthis._offset += length;\r\n\t\t\tthis._received += length;\r\n\t\t\tthis._task = response.task;\r\n\r\n\t\t\tconst percent = Math.round(this._received / this._task * 100);\r\n\r\n\t\t\tdebug(\r\n\t\t\t\t'collect',\r\n\t\t\t\t`Collect task ${this._received}/${this._task}`,\r\n\t\t\t\t`[${isNaN(percent) ? 100 : percent}%]`\r\n\t\t\t);\r\n\r\n\t\t\tthis.push(response.items);\r\n\t\t})\r\n\t\t.catch((error) => this.emit('error', error));\r\n\t}\r\n}\r\n\r\n/**\r\n * Убирает кавычки у параметра offset\r\n *\r\n * @type {[type]}\r\n */\r\nconst unespaceOffset = /\\\"offset\\\":\\\"(\\w+)\\\"/g;\r\n\r\n/**\r\n * Возвращает код для выполнения\r\n *\r\n * @param {string} method\r\n * @param {Object} params\r\n *\r\n * @return {string}\r\n */\r\nfunction getExecuteCode(method, params, { maxCalls }) {\r\n\tparams.offset = 'offset';\r\n\r\n\treturn `var task = parseInt(Args.task);\n\n\t// Уже полученно данных\n\tvar received = parseInt(Args.received);\n\n\t// Смещение\n\tvar offset = parseInt(Args.offset);\n\n\t// Продолжать ли получать данные\n\tvar proceed = task == 0 || received < task;\n\n\t// Остальные переменные\n\tvar i = 0, items = [], result, length;\n\n\twhile (i < ${maxCalls} && proceed) {\n\t\tresult = ${getMethodApi(method, params)};\n\n\t\tif (task == 0 || task > result.count) {\n\t\t\ttask = result.count;\n\t\t}\n\n\t\titems = items + result.items;\n\t\toffset = offset + result.items.length;\n\t\treceived  = received + result.items.length;\n\n\t\tproceed = received < task;\n\t\ti = i + 1;\n\t}\n\n\treturn {\n\t\ttask: task,\n\t\titems: items.splice(0, task)\n\t};`.replace(unespaceOffset, 'offset:$1');\r\n}\r\n\r\nmodule.exports = CollectStream;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/longpoll/events.js":"'use strict';\r\n\r\nconst { Message, actions } = require('./messages');\r\nconst { parseFlags } = require('./helpers');\r\n\r\nconst similarEvents = {\r\n\tflags: (event) => ({\r\n\t\tid: +event[1],\r\n\t\tpeer: +event[3],\r\n\t\tflags: parseFlags(event[2])\r\n\t}),\r\n\r\n\tread: (event) => ({\r\n\t\tid: +event[2],\r\n\t\tpeer: +event[1]\r\n\t}),\r\n\r\n\tgroup: (event) => ({\r\n\t\tpeer: +event[1],\r\n\t\tflags: parseFlags(+event[2], true)\r\n\t})\r\n};\r\n\r\n/**\r\n * Список платформ авторизации\r\n */\r\nconst authPlatform = {\r\n\t1: 'mobile',\r\n\t2: 'iphone',\r\n\t3: 'ipad',\r\n\t4: 'android',\r\n\t5: 'wphone',\r\n\t6: 'windows',\r\n\t7: 'standalone'\r\n};\r\n\r\n/**\r\n * Структура событий longpoll\r\n *\r\n * @type {Object}\r\n */\r\nmodule.exports = {\r\n\t1: {\r\n\t\tname: 'message.flag.replace',\r\n\t\taction: similarEvents.flags\r\n\t},\r\n\t2: {\r\n\t\tname: 'message.flag.set',\r\n\t\taction: similarEvents.flags\r\n\t},\r\n\t3: {\r\n\t\tname: 'message.flag.remove',\r\n\t\taction: similarEvents.flags\r\n\t},\r\n\t4: {\r\n\t\tname: 'message',\r\n\t\taction: function (message) {\r\n\t\t\tif ('source_act' in message[7]) {\r\n\t\t\t\tconst act = message[7].source_act;\r\n\r\n\t\t\t\tif (act in actions) {\r\n\t\t\t\t\treturn actions[act](this.vk, message);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.listenerCount('message') === 0) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\treturn new Message(this.vk, message);\r\n\t\t}\r\n\t},\r\n\t6: {\r\n\t\tname: 'message.read.inbox',\r\n\t\taction: similarEvents.read\r\n\t},\r\n\t7: {\r\n\t\tname: 'message.read.outbox',\r\n\t\taction: similarEvents.read\r\n\t},\r\n\t8: {\r\n\t\tname: 'user.online',\r\n\t\taction: (event) => ({\r\n\t\t\tuser: -event[1],\r\n\t\t\tplatform: authPlatform[event[2]] || null\r\n\t\t})\r\n\t},\r\n\t9: {\r\n\t\tname: 'user.offline',\r\n\t\taction: (event) => ({\r\n\t\t\tuser: -event[1],\r\n\t\t\texit: -event[2] === 0\r\n\t\t})\r\n\t},\r\n\t10: {\r\n\t\tname: 'group.flag.remove',\r\n\t\taction: similarEvents.group\r\n\t},\r\n\t11: {\r\n\t\tname: 'group.flag.replace',\r\n\t\taction: similarEvents.group\r\n\t},\r\n\t12: {\r\n\t\tname: 'group.flag.set',\r\n\t\taction: similarEvents.group\r\n\t},\r\n\t51: {\r\n\t\tname: 'chat.action',\r\n\t\taction: (event) => ({\r\n\t\t\tchat: +event[1],\r\n\t\t\tself: +event[2] === 1\r\n\t\t})\r\n\t},\r\n\t61: {\r\n\t\tname: 'typing.user',\r\n\t\taction: (event) => ({\r\n\t\t\tuser: +event[1]\r\n\t\t})\r\n\t},\r\n\t62: {\r\n\t\tname: 'typing.chat',\r\n\t\taction: (event) => ({\r\n\t\t\tuser: +event[1],\r\n\t\t\tchat: +event[2]\r\n\t\t})\r\n\t},\r\n\t80: {\r\n\t\tname: 'unread.count',\r\n\t\taction: (event) => ({\r\n\t\t\tcount: +event[1]\r\n\t\t})\r\n\t}\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/longpoll/messages.js":"'use strict';\r\n\r\nconst { inspect } = require('util');\r\n\r\nconst { SHEAR_CHAT_PEER } = require('../util/constants');\r\nconst {\r\n\tparseFlags,\r\n\tparseAttachments,\r\n\tparseFwds,\r\n\tunescape\r\n} = require('./helpers');\r\n\r\n/**\r\n * Заменяет тег <br> на \\n\r\n */\r\nconst brReplace = /<br>/g;\r\n\r\n/**\r\n * Базовай класс сообщений ВКонтакте\r\n *\r\n * @private\r\n */\r\nclass BaseMessage {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tthis.vk = vk;\r\n\r\n\t\tthis.id = +message[1];\r\n\r\n\t\tthis.date = +message[4];\r\n\t\tthis.peer = +message[3];\r\n\t}\r\n\r\n\t/**\r\n\t * Отправляет сообщение\r\n\t *\r\n\t * @param {mixed}  text\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tsend (text, params = {}) {\r\n\t\tif (typeof text === 'object') {\r\n\t\t\tparams = text;\r\n\t\t} else {\r\n\t\t\tparams.message = text;\r\n\t\t}\r\n\r\n\t\tparams.peer_id = this.peer;\r\n\r\n\t\treturn this.vk.api.messages.send(params);\r\n\t}\r\n\r\n\t/**\r\n\t * Отправляет стикер в текущий диалог\r\n\t *\r\n\t * @param {number} id\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tsendSticker (id) {\r\n\t\treturn this.send({\r\n\t\t\tsticker_id: id\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Отправляет фотографию в диалог\r\n\t *\r\n\t * @param {mixed}  source\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tsendPhoto (source, params = {}) {\r\n\t\treturn this.vk.upload.message({\r\n\t\t\tsource\r\n\t\t})\r\n\t\t.then((photo) => (\r\n\t\t\tthis.vk.getAttachment('photo', photo)\r\n\t\t))\r\n\t\t.then((attachment) => (\r\n\t\t\tthis.send(Object.assign(params, { attachment }))\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n\t * Изменяет статус набора текста пользователем в диалоге\r\n\t *\r\n\t * @param {Promise}\r\n\t */\r\n\tsetActivity () {\r\n\t\treturn this.vk.api.messages.setActivity({\r\n\t\t\ttype: 'typing',\r\n\t\t\tpeer_id: this.peer\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\treturn {\r\n\t\t\tid: this.id,\r\n\t\t\tdate: this.date,\r\n\t\t\tpeer: this.peer\r\n\t\t};\r\n\t}\r\n}\r\n\r\n/**\r\n * Базовый класс для всех событий чата\r\n *\r\n * @private\r\n */\r\nclass ChatEvent extends BaseMessage {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.user = +message[7].from;\r\n\t\tthis.chat = this.peer - SHEAR_CHAT_PEER;\r\n\t\tthis.title = unescape(message[5]);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param  {number} depth\r\n\t * @param  {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\treturn Object.assign(super.inspect(depth, options), {\r\n\t\t\tuser: this.user,\r\n\t\t\tchat: this.chat,\r\n\t\t\ttitle: this.title\r\n\t\t});\r\n\t}\r\n}\r\n\r\n/**\r\n * Сообщение\r\n *\r\n * @public\r\n */\r\nclass Message extends BaseMessage {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}     vk\r\n\t * @param {Object} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.chat = null;\r\n\r\n\t\tconst attachments = message[7];\r\n\r\n\t\tif (this.peer > SHEAR_CHAT_PEER) {\r\n\t\t\tthis.user = +attachments.from;\r\n\t\t\tthis.title = unescape(message[5]);\r\n\r\n\t\t\tthis.chat = this.peer - SHEAR_CHAT_PEER;\r\n\r\n\t\t\tthis.from = 'chat';\r\n\t\t} else if (this.peer < 0) {\r\n\t\t\tthis.user = null;\r\n\t\t\tthis.title = null;\r\n\r\n\t\t\tthis.admin = +attachments.from_admin;\r\n\r\n\t\t\tthis.from = 'group';\r\n\t\t} else {\r\n\t\t\tthis.user = this.peer;\r\n\t\t\tthis.title = null;\r\n\r\n\t\t\tthis.from = 'dialog';\r\n\t\t}\r\n\r\n\t\tif (message[6].length !== 0) {\r\n\t\t\tthis.text = unescape(message[6]).replace(brReplace, '\\n');\r\n\t\t} else {\r\n\t\t\tthis.text = null;\r\n\t\t}\r\n\r\n\t\tthis.flags = parseFlags(message[2], this.isGroup());\r\n\t\tthis.attachments = parseAttachments(attachments);\r\n\r\n\t\tthis.hasEmoji = 'emoji' in attachments;\r\n\r\n\t\tif ('geo' in attachments) {\r\n\t\t\tthis.attachments.geo = {\r\n\t\t\t\tid: attachments.geo,\r\n\t\t\t\tprovider: +attachments.geo_provider\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis._fwd = attachments.fwd || null;\r\n\t}\r\n\r\n\t/**\r\n\t * Отвечает на сообщение\r\n\t *\r\n\t * @param {mixed}  text\r\n\t * @param {Object} params\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\treply (text, params = {}) {\r\n\t\tif (typeof text === 'object') {\r\n\t\t\tparams = text;\r\n\t\t} else {\r\n\t\t\tparams.message = text;\r\n\t\t}\r\n\r\n\t\tparams.forward_messages = this.id;\r\n\r\n\t\treturn this.send(params);\r\n\t}\r\n\r\n\t/**\r\n\t * Проверяет наличие флага\r\n\t *\r\n\t * @param {string} name\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\thasFlag (name) {\r\n\t\treturn this.flags.includes(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Проверяет наличие прикриплений\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\thasAttachments () {\r\n\t\treturn Object.keys(this.attachments).length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Проверяет наличие прикрипления\r\n\t *\r\n\t * @param {string} name\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\thasAttachment (name) {\r\n\t\treturn name in this.attachments;\r\n\t}\r\n\r\n\t/**\r\n\t * Проверяет наличие пересылаемых сообщений\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\thasFwd () {\r\n\t\treturn this._fwd !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * Сообщение из диалога\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\tisDialog () {\r\n\t\treturn this.from === 'dialog';\r\n\t}\r\n\r\n\t/**\r\n\t * Сообщение из беседы\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\tisChat () {\r\n\t\treturn this.from === 'chat';\r\n\t}\r\n\r\n\t/**\r\n\t * Сообщения из сообщества\r\n\t *\r\n\t * @return {boolean}\r\n\t */\r\n\tisGroup () {\r\n\t\treturn this.from === 'group';\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает пересылаемые сообщения\r\n\t *\r\n\t * @return {Array}\r\n\t */\r\n\tgetFwd () {\r\n\t\tif (!this.hasFwd()) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tif (Array.isArray(this._fwd)) {\r\n\t\t\treturn this._fwd;\r\n\t\t}\r\n\r\n\t\tthis._fwd = parseFwds(this._fwd);\r\n\r\n\t\treturn this._fwd;\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @return object\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\tconst print = Object.assign(super.inspect(depth, options), {\r\n\t\t\tuser: this.user,\r\n\t\t\tchat: this.chat,\r\n\t\t\ttitle: this.title,\r\n\t\t\ttext: this.text,\r\n\t\t\tfrom: this.from,\r\n\t\t\thasEmoji: this.hasEmoji,\r\n\t\t\tflags: this.flags,\r\n\t\t\tattachments: this.attachments\r\n\t\t});\r\n\r\n\t\treturn this.constructor.name + ' ' + inspect(print, options);\r\n\t}\r\n}\r\n\r\nexports.Message = Message;\r\n\r\n/**\r\n * Создание чата\r\n *\r\n * @public\r\n */\r\nclass ChatCreate extends ChatEvent {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.title = unescape(message[7].source_text);\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param  {number} depth\r\n\t * @param  {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\treturn this.constructor.name + ' ' + inspect(\r\n\t\t\tsuper.inspect(depth, options),\r\n\t\t\toptions\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Обновлено название беседы\r\n *\r\n * @public\r\n */\r\nclass TitleUpdate extends ChatEvent {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.title = unescape(message[7].source_text);\r\n\t}\r\n\r\n\t/**\r\n\t * Обновляет название беседы\r\n\t *\r\n\t * @param {string} title\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\trename (title) {\r\n\t\treturn this.vk.api.messages.editChat({\r\n\t\t\tchat_id: this.chat,\r\n\t\t\ttitle: title\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\treturn this.constructor.name + ' ' + inspect(\r\n\t\t\tsuper.inspect(depth, options),\r\n\t\t\toptions\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Обновлена фотография беседы\r\n *\r\n * @public\r\n */\r\nclass PhotoUpdate extends ChatEvent {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tconst [onwer, id] = message[7].attach1.split('_');\r\n\r\n\t\tthis.photo = {\r\n\t\t\tid: +id,\r\n\t\t\towner: +onwer\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Удаляет фотографию беседы\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tremove () {\r\n\t\treturn this.vk.api.messages.deleteChatPhoto({\r\n\t\t\tchat_id: this.chat\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\tconst print = Object.assign(super.inspect(depth, options), {\r\n\t\t\tphoto: this.photo\r\n\t\t});\r\n\r\n\t\treturn this.constructor.name + ' ' + inspect(print, options);\r\n\t}\r\n}\r\n\r\n/**\r\n * Удаление фотографии беседы\r\n */\r\nclass PhotoRemove extends ChatEvent {\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {string}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\treturn this.constructor.name + ' ' + inspect(\r\n\t\t\tsuper.inspect(depth, options),\r\n\t\t\toptions\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * Добавлен пользователь в беседу\r\n */\r\nclass InviteUser extends ChatEvent {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.invite = +message[7].source_mid;\r\n\t}\r\n\r\n\t/**\r\n\t * Исключает пользователя\r\n\t *\r\n\t * @param {number} id\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tkick (id = this.invite) {\r\n\t\treturn this.vk.api.messages.removeChatUser({\r\n\t\t\tchat_id: this.chat,\r\n\t\t\tuser_id: id\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\tconst print = Object.assign(super.inspect(depth, options), {\r\n\t\t\tinvite: this.invite\r\n\t\t});\r\n\r\n\t\treturn this.constructor.name + ' ' + inspect(print, options);\r\n\t}\r\n}\r\n\r\n/**\r\n * Исключен пользователь из беседы\r\n */\r\nclass KickUser extends ChatEvent {\r\n\t/**\r\n\t * Конструктор\r\n\t *\r\n\t * @param {VK}    vk\r\n\t * @param {Array} message\r\n\t */\r\n\tconstructor (vk, message) {\r\n\t\tsuper(vk, message);\r\n\r\n\t\tthis.kick = +message[7].source_mid;\r\n\t}\r\n\r\n\t/**\r\n\t * Приглашает пользователя обратко\r\n\t *\r\n\t * @param {number} id\r\n\t *\r\n\t * @return {Promise}\r\n\t */\r\n\tinvite (id = this.kick) {\r\n\t\treturn this.vk.api.messages.addChatUser({\r\n\t\t\tchat_id: this.chat,\r\n\t\t\tuser_id: id\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Возвращает свойства которые нужно вывести\r\n\t *\r\n\t * @param {number} depth\r\n\t * @param {Object} options\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tinspect (depth, options) {\r\n\t\tconst print = Object.assign(super.inspect(depth, options), {\r\n\t\t\tkick: this.kick\r\n\t\t});\r\n\r\n\t\treturn this.constructor.name + ' ' + inspect(print, options);\r\n\t}\r\n}\r\n\r\n/**\r\n * Обработчики событий чата\r\n */\r\nexports.actions = {\r\n\tchat_create: (vk, message) => (\r\n\t\t[new ChatCreate(vk, message), 'chat.create']\r\n\t),\r\n\r\n\tchat_title_update: (vk, message) => (\r\n\t\t[new TitleUpdate(vk, message), 'chat.rename']\r\n\t),\r\n\r\n\tchat_photo_update: (vk, message) => (\r\n\t\t[new PhotoUpdate(vk, message), 'chat.photo.update']\r\n\t),\r\n\t/* Это не стандартизировано */\r\n\tchat_photo_remove: (vk, message) => (\r\n\t\t[new PhotoRemove(vk, message), 'chat.photo.remove']\r\n\t),\r\n\r\n\tchat_invite_user: (vk, message) => (\r\n\t\t[new InviteUser(vk, message), 'chat.invite']\r\n\t),\r\n\r\n\tchat_kick_user: (vk, message) => (\r\n\t\t[new KickUser(vk, message), 'chat.kick']\r\n\t)\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/longpoll/helpers.js":"'use strict';\r\n\r\n/**\r\n * Список флагов сообщения\r\n *\r\n * unread - сообщение не прочитано\r\n * outbox - исходящее сообщение\r\n * replied - на сообщение был создан ответ\r\n * important - помеченное сообщение\r\n * chat - сообщение отправлено через чат\r\n * friends - сообщение отправлено другом\r\n * spam - сообщение помечено как \"Спам\"\r\n * delеtеd - сообщение удалено (в корзине)\r\n * fixed - сообщение проверено пользователем на спам\r\n * media - сообщение содержит медиаконтент\r\n */\r\nconst dialogFlags = {\r\n\t1: 'unread',\r\n\t2: 'outbox',\r\n\t4: 'replied',\r\n\t8: 'important',\r\n\t16: 'chat',\r\n\t32: 'friends',\r\n\t64: 'spam',\r\n\t128: 'delеtеd',\r\n\t256: 'fixed',\r\n\t512: 'media'\r\n};\r\n\r\n/**\r\n * Список флагов сообщества\r\n *\r\n * important - важный диалог\r\n * answered - диалог с ответом от сообщества\r\n * ... наследование сообщений диалогов\r\n */\r\nconst groupFlags = Object.assign({}, dialogFlags, {\r\n\t1: 'important',\r\n\t2: 'answered'\r\n});\r\n\r\n/**\r\n * Парсирит longpoll флаги\r\n *\r\n * @return {Array}\r\n */\r\nfunction parseFlags(sum, type = false) {\r\n\tconst list = type ? groupFlags : dialogFlags;\r\n\r\n\tconst flags = [];\r\n\r\n\tfor (let i = 0, bit = 1; i < 10; ++i, bit *= 2) {\r\n\t\tif ((sum & bit) !== 0) {\r\n\t\t\tflags.push(list[bit]);\r\n\t\t}\r\n\t}\r\n\r\n\treturn flags;\r\n}\r\n\r\nexports.parseFlags = parseFlags;\r\n\r\n/**\r\n * Уникальные прикрипления к сообщениям\r\n */\r\nconst attachmentOne = {\r\n\t/* Отправлен стикер */\r\n\tsticker: (raw) => ({\r\n\t\tsticker: {\r\n\t\t\tid: +raw.attach1,\r\n\t\t\tproduct: +raw.attach1_product_id\r\n\t\t}\r\n\t}),\r\n\r\n\t/* Передача денег */\r\n\tmoney_transfer: (raw) => ({\r\n\t\tmoney: {\r\n\t\t\tdata: raw.attach1 || null,\r\n\t\t\tamount: +raw.attach1_amount,\r\n\t\t\tcurrency: raw.attach1_currency\r\n\t\t}\r\n\t}),\r\n\r\n\t/* Отправлен подарок */\r\n\tgift: (raw) => ({\r\n\t\tgift: {\r\n\t\t\tid: +raw.attach1\r\n\t\t}\r\n\t})\r\n};\r\n\r\n/**\r\n * Парсирит прикрипления\r\n *\r\n * @param  {Object} raw\r\n *\r\n * @return {Object}\r\n */\r\nfunction parseAttachments(raw) {\r\n\tif ('attach1' in raw && raw.attach1_type in attachmentOne) {\r\n\t\treturn attachmentOne[raw.attach1_type](raw);\r\n\t}\r\n\r\n\tconst attachments = {};\r\n\r\n\tfor (let i = 1, key = 'attach1'; key in raw; ++i, key = 'attach' + i) {\r\n\t\tlet type = raw[key + '_type'];\r\n\r\n\t\tif (!(type in attachments)) {\r\n\t\t\tattachments[type] = [];\r\n\t\t}\r\n\r\n\t\tif (type === 'link') {\r\n\t\t\tconst attachment = {\r\n\t\t\t\turl: raw[key + '_url'],\r\n\t\t\t\ttitle: raw[key + '_title'],\r\n\t\t\t\tdescription: raw[key + '_desc']\r\n\t\t\t};\r\n\r\n\t\t\tconst photoKey = key + '_photo';\r\n\r\n\t\t\tif (photoKey in raw && raw[photoKey] !== '') {\r\n\t\t\t\tconst [owner, id] = raw[photoKey].split('_');\r\n\r\n\t\t\t\tattachment.photo = {\r\n\t\t\t\t\tid: +id,\r\n\t\t\t\t\towner: +owner\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tattachment.photo = null;\r\n\t\t\t}\r\n\r\n\t\t\tattachments[type].push(attachment);\r\n\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst [owner, id] = raw[key].split('_');\r\n\r\n\t\tconst attachment = {\r\n\t\t\tid: +id,\r\n\t\t\towner: +owner\r\n\t\t};\r\n\r\n\t\tif (type === 'doc' && key + '_kind' in raw) {\r\n\t\t\tattachment.type = raw[key + '_kind'];\r\n\t\t}\r\n\r\n\t\tattachments[type].push(attachment);\r\n\t}\r\n\r\n\treturn attachments;\r\n}\r\n\r\nexports.parseAttachments = parseAttachments;\r\n\r\n/**\r\n * Проверяет наличие скобок\r\n */\r\nconst fwdHasBrackets = /(\\(.*\\))/;\r\n\r\n/**\r\n * Парсирит пересланные сообщения\r\n *\r\n * @param {string} raw\r\n *\r\n * @return {Array}\r\n */\r\nfunction parseFwds(raw) {\r\n\tif (fwdHasBrackets.test(raw)) {\r\n\t\traw = raw.substring(1, raw.length - 1);\r\n\t}\r\n\r\n\tconst out = [];\r\n\r\n\tfor (const block of splitFwdDelimiter(raw, ',')) {\r\n\t\tconst pair = splitFwdDelimiter(block, ':');\r\n\r\n\t\tif (pair.length === 0) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tconst [owner, id] = pair[0].split('_');\r\n\r\n\t\tconst fwd = {\r\n\t\t\tid: +id,\r\n\t\t\towner: +owner,\r\n\t\t\tfwd: []\r\n\t\t};\r\n\r\n\t\tif (pair.length !== 2) {\r\n\t\t\tout.push(fwd);\r\n\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tfwd.fwd = parseFwds(pair[1]);\r\n\r\n\t\tout.push(fwd);\r\n\t}\r\n\r\n\treturn out;\r\n}\r\n\r\n/**\r\n * Разделяет строку через разделитель\r\n *\r\n * @param {string} raw\r\n * @param {string} delimiter\r\n *\r\n * @return {Array}\r\n */\r\nfunction splitFwdDelimiter(raw, delimiter) {\r\n\tconst out = [];\r\n\r\n\tlet tmp = '';\r\n\tlet left = 0;\r\n\tlet right = 0;\r\n\r\n\tconst keepResult = () => {\r\n\t\tout.push(tmp);\r\n\t\ttmp = '';\r\n\t};\r\n\r\n\tfor (const sign of raw) {\r\n\t\tswitch (sign) {\r\n\t\t\tcase delimiter:\r\n\t\t\t\tif (left === right) {\r\n\t\t\t\t\tleft = right = 0;\r\n\r\n\t\t\t\t\tkeepResult();\r\n\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase '(':\r\n\t\t\t\t++left;\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tcase ')':\r\n\t\t\t\t++right;\r\n\t\t}\r\n\r\n\t\ttmp += sign;\r\n\t}\r\n\r\n\tkeepResult();\r\n\r\n\treturn out;\r\n}\r\n\r\nexports.parseFwds = parseFwds;\r\n\r\n/**\r\n * Кэш регулярных выражений\r\n */\r\nconst lt = /&lt;/g;\r\nconst qt = /&gt;/g;\r\nconst quot = /&quot;/g;\r\nconst amp = /&amp;/g;\r\nconst br = /<br>/g;\r\n\r\n/**\r\n * Декодирует HTML сущности\r\n *\r\n * @param {string} str\r\n *\r\n * @return {string}\r\n */\r\nfunction unescape(str) {\r\n\treturn str\r\n\t.replace(lt, '<')\r\n\t.replace(qt, '>')\r\n\t.replace(quot, '\"')\r\n\t.replace(amp, '&');\r\n}\r\n\r\nexports.unescape = unescape;\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/snippets/attachments.js":"'use strict';\r\n\r\n/**\r\n * Собирает прикрипление из переданных значений\r\n *\r\n * @param {string} type\r\n * @param {mixed}  attachment\r\n *\r\n * @return {string}\r\n */\r\nexports.getAttachment = (type, attachment) => (\r\n\ttype + attachment.owner_id + '_' + attachment.id\r\n);\r\n\r\n/**\r\n * Возвращает ссылку на маленькую фотографию\r\n *\r\n * @param {Object} photo\r\n *\r\n * @return {string}\r\n */\r\nconst getSmallPhoto = (photo) => (\r\n\tphoto.photo_130 || photo.photo_75\r\n);\r\n\r\nexports.getSmallPhoto = getSmallPhoto;\r\n\r\n/**\r\n * Возвращает ссылку на среднюю фотографию\r\n *\r\n * @param {Object} photo\r\n *\r\n * @return {string}\r\n */\r\nconst getMediumPhoto = (photo) => (\r\n\tphoto.photo_807 || photo.photo_604 || getSmallPhoto(photo)\r\n);\r\n\r\nexports.getMediumPhoto = getMediumPhoto;\r\n\r\n/**\r\n * Возвращает ссылку на большую фотографию\r\n *\r\n * @param {Object} photo\r\n *\r\n * @return {string}\r\n */\r\nexports.getLargePhoto = (photo) => (\r\n\tphoto.photo_2560 || photo.photo_1280 || getMediumPhoto(photo)\r\n);\r\n","/home/travis/build/npmtest/node-npmtest-vk-io/node_modules/vk-io/snippets/link.js":"'use strict';\r\n\r\nconst Promise = require('bluebird');\r\n\r\nconst mainTypes = /(photo|video|doc|album|topic|wall|page)([\\d-]+)_(\\d+)/i;\r\n\r\nconst otherTypes = /(app(?:lication)?|id|club|public)(\\d+)/i;\r\n\r\nconst replaceNotUri = /https?:\\/\\/(?:m)?.?vk\\.com\\//i;\r\n\r\nconst aliasOtherType = {\r\n\tid: 'user',\r\n\tclub: 'group',\r\n\tapplication: 'app',\r\n\tpublic: 'group'\r\n};\r\n\r\n/**\r\n * Парсирит ссылку ВКонтакте\r\n *\r\n * @param {Api}    api\r\n * @param {string} uri\r\n *\r\n * @return {Promise}\r\n */\r\nmodule.exports = (api, uri) => {\r\n\tif (mainTypes.test(uri)) {\r\n\t\tconst [, type, peer, id] = uri.match(mainTypes);\r\n\r\n\t\treturn Promise.resolve({\r\n\t\t\tid: +id,\r\n\t\t\tpeer: +peer,\r\n\t\t\ttype: type.toLowerCase()\r\n\t\t});\r\n\t}\r\n\r\n\tif (otherTypes.test(uri)) {\r\n\t\tconst match = uri.match(otherTypes);\r\n\r\n\t\tlet type = match[1].toLowerCase();\r\n\r\n\t\tif (type in aliasOtherType) {\r\n\t\t\ttype = aliasOtherType[type];\r\n\t\t}\r\n\r\n\t\treturn Promise.resolve({\r\n\t\t\tid: +match[2],\r\n\t\t\ttype\r\n\t\t});\r\n\t}\r\n\r\n\tif (/^\\d+$/.test(uri)) {\r\n\t\treturn Promise.resolve({\r\n\t\t\tid: +uri,\r\n\t\t\ttype: 'user'\r\n\t\t});\r\n\t}\r\n\r\n\treturn api.utils.resolveScreenName({\r\n\t\tscreen_name: uri.replace(replaceNotUri, '')\r\n\t})\r\n\t.then((screen) => {\r\n\t\tif (Array.isArray(screen)) {\r\n\t\t\tthrow new Error('This link is not valid');\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tid: +screen.object_id,\r\n\t\t\ttype: screen.type\r\n\t\t};\r\n\t});\r\n};\r\n"}